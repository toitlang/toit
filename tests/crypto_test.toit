// Copyright (C) 2018 Toitware ApS.
// Use of this source code is governed by a Zero-Clause BSD license that can
// be found in the tests/LICENSE file.

import expect show *

import crypto show *
import crypto.aes show *
import crypto.sha show *
import crypto.siphash show *
import crypto.sha1 show *
import crypto.crc16 show *
import crypto.crc32 show *
import crypto.hamming as hamming

import binary show BIG_ENDIAN
import encoding.hex as hex
import encoding.base64 as base64

expect name [code]:
  expect_equals
    name
    catch code

expect_out_of_range [code]:
  expect "OUT_OF_RANGE" code

expect_invalid_argument [code]:
  expect "INVALID_ARGUMENT" code

expect_integer_parsing_error [code]:
  expect "INTEGER_PARSING_ERROR" code

expect_wrong_type [code]:
  caught_exception := catch code
  expect_equals true (caught_exception == "WRONG_OBJECT_TYPE" or caught_exception == "AS_CHECK_FAILED")

expect_already_closed [code]:
  expect "ALREADY_CLOSED" code

expect_equal_arrays a b:
  expect_equals a.size b.size
  a.size.repeat:
    expect_equals a[it] b[it]

confuse x -> any: return x

main:
  hex_test
  hamming_test
  hash_test
  sip_test
  aead_simple_test

hex_test -> none:
  expect_equals "" (hex.encode #[])
  expect_equals "" (hex.encode "")
  expect_equals "a5" (hex.encode #[0xa5])
  expect_equals "41" (hex.encode "A")

  expect_equals "a552" (hex.encode #[0xa5, 0x52])
  expect_equals "4134" (hex.encode "A4")
  expect_equals "c3b8" (hex.encode "Ã¸")

  expect_equals #[] (hex.decode "")
  expect_equals #[0xa5] (hex.decode "a5")
  expect_equals #[0xa5] (hex.decode "A5")
  expect_equals #[0x41] (hex.decode "41")

  expect_equals #[0xf5, 0x52] (hex.decode "f552")
  expect_equals #[0xf5, 0x52] (hex.decode "F552")
  expect_equals #[0x41, 0x34] (hex.decode "4134")

  expect_equals #[10] (hex.decode "a")
  expect_integer_parsing_error: hex.decode "s"
  expect_integer_parsing_error: hex.decode "sa"
  expect_integer_parsing_error: hex.decode "as"
  expect_invalid_argument: hex.decode "0348af8g1921"
  expect_invalid_argument: hex.decode "-348af8a1921"

hash_test -> none:
  EMPTY_HEX ::= "da39a3ee5e6b4b0d3255bfef95601890afd80709"
  EMPTY_SHA224 ::= "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
  EMPTY_SHA2 ::= "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
  EMPTY_SHA384 ::= "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b"
  EMPTY_SHA512 ::= "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
  EMPTY_CRC32 ::=  "00000000"
  EMPTY_CRC16 ::=  "0000"
  expect_equals EMPTY_HEX (hex.encode (sha1 ""))
  expect_equals EMPTY_SHA224 (hex.encode (sha224 ""))
  expect_equals EMPTY_SHA2 (hex.encode (sha256 ""))
  expect_equals EMPTY_SHA384 (hex.encode (sha384 ""))
  expect_equals EMPTY_SHA512 (hex.encode (sha512 ""))
  expect_equals EMPTY_CRC32 (hex.encode (crc32 ""))
  expect_equals "2jmj7l5rSw0yVb/vlWAYkK/YBwk=" (base64.encode (sha1 ""))

  PARTY ::= "Now is the time for all good men to come to the aid of the party"
  hash := sha1 PARTY
  expect_equals "02d2837a5cc31aa9feb8f66a2a3db9819464542b" (hex.encode hash)
  hash2 := sha256 PARTY
  hash3 := crc32 PARTY
  hash4 := crc16 PARTY
  hash5 := sha224 PARTY
  hash6 := sha384 PARTY
  hash7 := sha512 PARTY
  expect_equals "f160938592eeac116451ebc4da23dbc17e29283aef99de0197d705ad4d4c43f1" (hex.encode hash2)
  expect_equals "852430d0" (hex.encode hash3)
  expect_equals "a87e" (hex.encode hash4)
  expect_equals "AtKDelzDGqn+uPZqKj25gZRkVCs=" (base64.encode hash)
  expect_equals "0824c514a92fcac7cbe5221d1d28d7e0cfb061d4dbb33f0a8f1fe9c2" (hex.encode hash5)
  expect_equals "77d1a7ca704cd324b3519f2d89f455953e25801373bfc5a9eea38d16bc1aa57f1c90f0250c7bab60b07622c9bad5c1bf" (hex.encode hash6)
  expect_equals "f8777873ec6d5108191afeccc87c696fea78dcdf156a420bf3efadb1669d0adf56a2139ca7da2b8511e1ac25a9ce230dc0a7fe7a721e2ebcb7f8182f41dcc162" (hex.encode hash7)

  expect_equals EMPTY_HEX (hex.encode (sha1 ""))
  expect_equal_arrays (sha1 (ByteArray 0)) (sha1 "")
  expect_equal_arrays (sha256 (ByteArray 0)) (sha256 "")

  expect_equals "0a0a9f2a6772942557ab5355d76af442f8f65e01" (hex.encode (sha1 "Hello, World!"))
  expect_equals "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f" (hex.encode (sha256 "Hello, World!"))
  expect_equal_arrays (sha1 ("Hello, World!".to_byte_array)) (sha1 "Hello, World!")

  sha1 := Sha1
  sha2 := Sha256
  crc32 := Crc32
  crc16 := Crc16
  expect_equals EMPTY_HEX (hex.encode (Sha1).get)
  expect_equals EMPTY_CRC32 (hex.encode (Crc32).get)
  expect_equals EMPTY_CRC16 (hex.encode (Crc16).get)
  GOLD_MEMBER := "Hey, everyone! I am from Holland! Isn't that weird?\n"
  sha1.add GOLD_MEMBER
  sha2.add GOLD_MEMBER
  crc32.add GOLD_MEMBER
  crc16.add GOLD_MEMBER
  4.repeat: sha1.add GOLD_MEMBER
  4.repeat: sha2.add GOLD_MEMBER
  4.repeat: crc32.add GOLD_MEMBER
  4.repeat: crc16.add GOLD_MEMBER
  expect_equals "7fd2b3793f46a174024e4fb78b17c0dc4c5bf2bc" (hex.encode sha1.get)
  expect_equals "56185f37" (hex.encode crc32.get)
  expect_equals "c25d" (hex.encode crc16.get)
  expect_equals "68ffcaadaabb22152c90cfbe4e0cd17ddf2f469d8ea9d021713f1b17c72705b8" (hex.encode sha2.get)
  expect_already_closed: (sha2.get)   // Can't do this twice.

  sha2 = Sha256
  crc32 = Crc32
  crc16 = Crc16

  // Takes a string or a byte array.
  expect_wrong_type: base64.decode (confuse 10000)
  expect_wrong_type: sha1.add 10000
  expect_wrong_type: sha2.add 10000
  expect_wrong_type: crc32.add 10000
  expect_wrong_type: crc16.add 10000

  // Missing trailing '=' signs.
  expect_out_of_range: base64.decode "aaa"
  expect_out_of_range: base64.decode "aa"
  expect_out_of_range: base64.decode "a"

  // Misplaced '=' sign
  expect_out_of_range: base64.decode "=AAA"
  expect_out_of_range: base64.decode "A=AA"
  expect_out_of_range: base64.decode "AA=A"

  // Illegal characters
  expect_out_of_range: base64.decode "aaa_"
  expect_out_of_range: base64.decode "aaa\n"
  expect_out_of_range: base64.decode "aaa."
  expect_out_of_range: base64.decode "aaa@"

  // Unused bits are not zero
  expect_out_of_range: base64.decode "AAa="
  expect_out_of_range: base64.decode "Aa=="
  expect_out_of_range: base64.decode "A4=="

hamming_test:
  // The Hamming test routine can encode any 11 bit number to a 16 bit number.
  // It can correct any bit flip in the 16 bit number and detect any two bit flips.
  (1 << 11).repeat: | input |
    correct := hamming.encode_16_11 input
    // No bit errors.
    expect_equals input (hamming.fix_16_11 correct)
    11.repeat: | bit_flip_1 |
      11.repeat: | bit_flip_2 |
        if bit_flip_1 == bit_flip_2:
          // Just flip one bit.  This should be correctable.
          expect_equals
            input
            hamming.fix_16_11 correct ^ (1 << bit_flip_1)
        else:
          // Flip two bits.  This should be detectable
          expect_equals
            null
            hamming.fix_16_11 correct ^ (1 << bit_flip_1) ^ (1 << bit_flip_2)

aead_simple_test:
  key := ByteArray 16: random 256
  initialization_vector := ByteArray 12: random 256

  encrypted := (AesGcm.encryptor key initialization_vector).encrypt DREAM

  expect_equals DREAM.size + 16 encrypted.size
  expect_not_equals DREAM[..DREAM.size].to_byte_array DREAM

  round_trip := (AesGcm.decryptor key initialization_vector).decrypt encrypted

  expect_equals DREAM.to_byte_array round_trip

sip_test:
  key := ByteArray 16: it

  in := ByteArray 64

  64.repeat: | size |
    print size
    in[size] = size
    hash_8  := siphash in[0..size] key --output_length=8
    expect_equals SIP_VECTOR_8[size] hash_8

    hash_16 := siphash in[0..size] key --output_length=16
    expect_equals SIP_VECTOR_16[size] hash_16

    (size - 1).repeat:
      part1 := in[0..it + 1]
      part2 := in[it + 1..size]

      h8 := Siphash key --output_length=8
      h8.add part1
      h8.add part2
      result8 := h8.get
      expect_equals SIP_VECTOR_8[size] result8

      h16 := Siphash key --output_length=16
      h16.add part1
      h16.add part2
      result16 := h16.get
      expect_equals SIP_VECTOR_16[size] result16

SIP_VECTOR_8 ::= [
    #[0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72,],
    #[0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74,],
    #[0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d,],
    #[0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85,],
    #[0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf,],
    #[0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18,],
    #[0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb,],
    #[0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab,],
    #[0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93,],
    #[0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e,],
    #[0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a,],
    #[0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4,],
    #[0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75,],
    #[0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14,],
    #[0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7,],
    #[0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1,],
    #[0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f,],
    #[0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69,],
    #[0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b,],
    #[0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb,],
    #[0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe,],
    #[0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0,],
    #[0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93,],
    #[0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8,],
    #[0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8,],
    #[0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc,],
    #[0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17,],
    #[0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f,],
    #[0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde,],
    #[0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6,],
    #[0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad,],
    #[0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32,],
    #[0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71,],
    #[0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7,],
    #[0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12,],
    #[0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15,],
    #[0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31,],
    #[0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02,],
    #[0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca,],
    #[0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a,],
    #[0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e,],
    #[0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad,],
    #[0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18,],
    #[0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4,],
    #[0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9,],
    #[0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9,],
    #[0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb,],
    #[0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0,],
    #[0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6,],
    #[0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7,],
    #[0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee,],
    #[0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1,],
    #[0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a,],
    #[0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81,],
    #[0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f,],
    #[0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24,],
    #[0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7,],
    #[0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea,],
    #[0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60,],
    #[0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66,],
    #[0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c,],
    #[0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f,],
    #[0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5,],
    #[0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95,],
]

SIP_VECTOR_16 ::= [
    #[0xa3, 0x81, 0x7f, 0x04, 0xba, 0x25, 0xa8, 0xe6, 0x6d, 0xf6, 0x72, 0x14, 0xc7, 0x55, 0x02, 0x93,],
    #[0xda, 0x87, 0xc1, 0xd8, 0x6b, 0x99, 0xaf, 0x44, 0x34, 0x76, 0x59, 0x11, 0x9b, 0x22, 0xfc, 0x45,],
    #[0x81, 0x77, 0x22, 0x8d, 0xa4, 0xa4, 0x5d, 0xc7, 0xfc, 0xa3, 0x8b, 0xde, 0xf6, 0x0a, 0xff, 0xe4,],
    #[0x9c, 0x70, 0xb6, 0x0c, 0x52, 0x67, 0xa9, 0x4e, 0x5f, 0x33, 0xb6, 0xb0, 0x29, 0x85, 0xed, 0x51,],
    #[0xf8, 0x81, 0x64, 0xc1, 0x2d, 0x9c, 0x8f, 0xaf, 0x7d, 0x0f, 0x6e, 0x7c, 0x7b, 0xcd, 0x55, 0x79,],
    #[0x13, 0x68, 0x87, 0x59, 0x80, 0x77, 0x6f, 0x88, 0x54, 0x52, 0x7a, 0x07, 0x69, 0x0e, 0x96, 0x27,],
    #[0x14, 0xee, 0xca, 0x33, 0x8b, 0x20, 0x86, 0x13, 0x48, 0x5e, 0xa0, 0x30, 0x8f, 0xd7, 0xa1, 0x5e,],
    #[0xa1, 0xf1, 0xeb, 0xbe, 0xd8, 0xdb, 0xc1, 0x53, 0xc0, 0xb8, 0x4a, 0xa6, 0x1f, 0xf0, 0x82, 0x39,],
    #[0x3b, 0x62, 0xa9, 0xba, 0x62, 0x58, 0xf5, 0x61, 0x0f, 0x83, 0xe2, 0x64, 0xf3, 0x14, 0x97, 0xb4,],
    #[0x26, 0x44, 0x99, 0x06, 0x0a, 0xd9, 0xba, 0xab, 0xc4, 0x7f, 0x8b, 0x02, 0xbb, 0x6d, 0x71, 0xed,],
    #[0x00, 0x11, 0x0d, 0xc3, 0x78, 0x14, 0x69, 0x56, 0xc9, 0x54, 0x47, 0xd3, 0xf3, 0xd0, 0xfb, 0xba,],
    #[0x01, 0x51, 0xc5, 0x68, 0x38, 0x6b, 0x66, 0x77, 0xa2, 0xb4, 0xdc, 0x6f, 0x81, 0xe5, 0xdc, 0x18,],
    #[0xd6, 0x26, 0xb2, 0x66, 0x90, 0x5e, 0xf3, 0x58, 0x82, 0x63, 0x4d, 0xf6, 0x85, 0x32, 0xc1, 0x25,],
    #[0x98, 0x69, 0xe2, 0x47, 0xe9, 0xc0, 0x8b, 0x10, 0xd0, 0x29, 0x93, 0x4f, 0xc4, 0xb9, 0x52, 0xf7,],
    #[0x31, 0xfc, 0xef, 0xac, 0x66, 0xd7, 0xde, 0x9c, 0x7e, 0xc7, 0x48, 0x5f, 0xe4, 0x49, 0x49, 0x02,],
    #[0x54, 0x93, 0xe9, 0x99, 0x33, 0xb0, 0xa8, 0x11, 0x7e, 0x08, 0xec, 0x0f, 0x97, 0xcf, 0xc3, 0xd9,],
    #[0x6e, 0xe2, 0xa4, 0xca, 0x67, 0xb0, 0x54, 0xbb, 0xfd, 0x33, 0x15, 0xbf, 0x85, 0x23, 0x05, 0x77,],
    #[0x47, 0x3d, 0x06, 0xe8, 0x73, 0x8d, 0xb8, 0x98, 0x54, 0xc0, 0x66, 0xc4, 0x7a, 0xe4, 0x77, 0x40,],
    #[0xa4, 0x26, 0xe5, 0xe4, 0x23, 0xbf, 0x48, 0x85, 0x29, 0x4d, 0xa4, 0x81, 0xfe, 0xae, 0xf7, 0x23,],
    #[0x78, 0x01, 0x77, 0x31, 0xcf, 0x65, 0xfa, 0xb0, 0x74, 0xd5, 0x20, 0x89, 0x52, 0x51, 0x2e, 0xb1,],
    #[0x9e, 0x25, 0xfc, 0x83, 0x3f, 0x22, 0x90, 0x73, 0x3e, 0x93, 0x44, 0xa5, 0xe8, 0x38, 0x39, 0xeb,],
    #[0x56, 0x8e, 0x49, 0x5a, 0xbe, 0x52, 0x5a, 0x21, 0x8a, 0x22, 0x14, 0xcd, 0x3e, 0x07, 0x1d, 0x12,],
    #[0x4a, 0x29, 0xb5, 0x45, 0x52, 0xd1, 0x6b, 0x9a, 0x46, 0x9c, 0x10, 0x52, 0x8e, 0xff, 0x0a, 0xae,],
    #[0xc9, 0xd1, 0x84, 0xdd, 0xd5, 0xa9, 0xf5, 0xe0, 0xcf, 0x8c, 0xe2, 0x9a, 0x9a, 0xbf, 0x69, 0x1c,],
    #[0x2d, 0xb4, 0x79, 0xae, 0x78, 0xbd, 0x50, 0xd8, 0x88, 0x2a, 0x8a, 0x17, 0x8a, 0x61, 0x32, 0xad,],
    #[0x8e, 0xce, 0x5f, 0x04, 0x2d, 0x5e, 0x44, 0x7b, 0x50, 0x51, 0xb9, 0xea, 0xcb, 0x8d, 0x8f, 0x6f,],
    #[0x9c, 0x0b, 0x53, 0xb4, 0xb3, 0xc3, 0x07, 0xe8, 0x7e, 0xae, 0xe0, 0x86, 0x78, 0x14, 0x1f, 0x66,],
    #[0xab, 0xf2, 0x48, 0xaf, 0x69, 0xa6, 0xea, 0xe4, 0xbf, 0xd3, 0xeb, 0x2f, 0x12, 0x9e, 0xeb, 0x94,],
    #[0x06, 0x64, 0xda, 0x16, 0x68, 0x57, 0x4b, 0x88, 0xb9, 0x35, 0xf3, 0x02, 0x73, 0x58, 0xae, 0xf4,],
    #[0xaa, 0x4b, 0x9d, 0xc4, 0xbf, 0x33, 0x7d, 0xe9, 0x0c, 0xd4, 0xfd, 0x3c, 0x46, 0x7c, 0x6a, 0xb7,],
    #[0xea, 0x5c, 0x7f, 0x47, 0x1f, 0xaf, 0x6b, 0xde, 0x2b, 0x1a, 0xd7, 0xd4, 0x68, 0x6d, 0x22, 0x87,],
    #[0x29, 0x39, 0xb0, 0x18, 0x32, 0x23, 0xfa, 0xfc, 0x17, 0x23, 0xde, 0x4f, 0x52, 0xc4, 0x3d, 0x35,],
    #[0x7c, 0x39, 0x56, 0xca, 0x5e, 0xea, 0xfc, 0x3e, 0x36, 0x3e, 0x9d, 0x55, 0x65, 0x46, 0xeb, 0x68,],
    #[0x77, 0xc6, 0x07, 0x71, 0x46, 0xf0, 0x1c, 0x32, 0xb6, 0xb6, 0x9d, 0x5f, 0x4e, 0xa9, 0xff, 0xcf,],
    #[0x37, 0xa6, 0x98, 0x6c, 0xb8, 0x84, 0x7e, 0xdf, 0x09, 0x25, 0xf0, 0xf1, 0x30, 0x9b, 0x54, 0xde,],
    #[0xa7, 0x05, 0xf0, 0xe6, 0x9d, 0xa9, 0xa8, 0xf9, 0x07, 0x24, 0x1a, 0x2e, 0x92, 0x3c, 0x8c, 0xc8,],
    #[0x3d, 0xc4, 0x7d, 0x1f, 0x29, 0xc4, 0x48, 0x46, 0x1e, 0x9e, 0x76, 0xed, 0x90, 0x4f, 0x67, 0x11,],
    #[0x0d, 0x62, 0xbf, 0x01, 0xe6, 0xfc, 0x0e, 0x1a, 0x0d, 0x3c, 0x47, 0x51, 0xc5, 0xd3, 0x69, 0x2b,],
    #[0x8c, 0x03, 0x46, 0x8b, 0xca, 0x7c, 0x66, 0x9e, 0xe4, 0xfd, 0x5e, 0x08, 0x4b, 0xbe, 0xe7, 0xb5,],
    #[0x52, 0x8a, 0x5b, 0xb9, 0x3b, 0xaf, 0x2c, 0x9c, 0x44, 0x73, 0xcc, 0xe5, 0xd0, 0xd2, 0x2b, 0xd9,],
    #[0xdf, 0x6a, 0x30, 0x1e, 0x95, 0xc9, 0x5d, 0xad, 0x97, 0xae, 0x0c, 0xc8, 0xc6, 0x91, 0x3b, 0xd8,],
    #[0x80, 0x11, 0x89, 0x90, 0x2c, 0x85, 0x7f, 0x39, 0xe7, 0x35, 0x91, 0x28, 0x5e, 0x70, 0xb6, 0xdb,],
    #[0xe6, 0x17, 0x34, 0x6a, 0xc9, 0xc2, 0x31, 0xbb, 0x36, 0x50, 0xae, 0x34, 0xcc, 0xca, 0x0c, 0x5b,],
    #[0x27, 0xd9, 0x34, 0x37, 0xef, 0xb7, 0x21, 0xaa, 0x40, 0x18, 0x21, 0xdc, 0xec, 0x5a, 0xdf, 0x89,],
    #[0x89, 0x23, 0x7d, 0x9d, 0xed, 0x9c, 0x5e, 0x78, 0xd8, 0xb1, 0xc9, 0xb1, 0x66, 0xcc, 0x73, 0x42,],
    #[0x4a, 0x6d, 0x80, 0x91, 0xbf, 0x5e, 0x7d, 0x65, 0x11, 0x89, 0xfa, 0x94, 0xa2, 0x50, 0xb1, 0x4c,],
    #[0x0e, 0x33, 0xf9, 0x60, 0x55, 0xe7, 0xae, 0x89, 0x3f, 0xfc, 0x0e, 0x3d, 0xcf, 0x49, 0x29, 0x02,],
    #[0xe6, 0x1c, 0x43, 0x2b, 0x72, 0x0b, 0x19, 0xd1, 0x8e, 0xc8, 0xd8, 0x4b, 0xdc, 0x63, 0x15, 0x1b,],
    #[0xf7, 0xe5, 0xae, 0xf5, 0x49, 0xf7, 0x82, 0xcf, 0x37, 0x90, 0x55, 0xa6, 0x08, 0x26, 0x9b, 0x16,],
    #[0x43, 0x8d, 0x03, 0x0f, 0xd0, 0xb7, 0xa5, 0x4f, 0xa8, 0x37, 0xf2, 0xad, 0x20, 0x1a, 0x64, 0x03,],
    #[0xa5, 0x90, 0xd3, 0xee, 0x4f, 0xbf, 0x04, 0xe3, 0x24, 0x7e, 0x0d, 0x27, 0xf2, 0x86, 0x42, 0x3f,],
    #[0x5f, 0xe2, 0xc1, 0xa1, 0x72, 0xfe, 0x93, 0xc4, 0xb1, 0x5c, 0xd3, 0x7c, 0xae, 0xf9, 0xf5, 0x38,],
    #[0x2c, 0x97, 0x32, 0x5c, 0xbd, 0x06, 0xb3, 0x6e, 0xb2, 0x13, 0x3d, 0xd0, 0x8b, 0x3a, 0x01, 0x7c,],
    #[0x92, 0xc8, 0x14, 0x22, 0x7a, 0x6b, 0xca, 0x94, 0x9f, 0xf0, 0x65, 0x9f, 0x00, 0x2a, 0xd3, 0x9e,],
    #[0xdc, 0xe8, 0x50, 0x11, 0x0b, 0xd8, 0x32, 0x8c, 0xfb, 0xd5, 0x08, 0x41, 0xd6, 0x91, 0x1d, 0x87,],
    #[0x67, 0xf1, 0x49, 0x84, 0xc7, 0xda, 0x79, 0x12, 0x48, 0xe3, 0x2b, 0xb5, 0x92, 0x25, 0x83, 0xda,],
    #[0x19, 0x38, 0xf2, 0xcf, 0x72, 0xd5, 0x4e, 0xe9, 0x7e, 0x94, 0x16, 0x6f, 0xa9, 0x1d, 0x2a, 0x36,],
    #[0x74, 0x48, 0x1e, 0x96, 0x46, 0xed, 0x49, 0xfe, 0x0f, 0x62, 0x24, 0x30, 0x16, 0x04, 0x69, 0x8e,],
    #[0x57, 0xfc, 0xa5, 0xde, 0x98, 0xa9, 0xd6, 0xd8, 0x00, 0x64, 0x38, 0xd0, 0x58, 0x3d, 0x8a, 0x1d,],
    #[0x9f, 0xec, 0xde, 0x1c, 0xef, 0xdc, 0x1c, 0xbe, 0xd4, 0x76, 0x36, 0x74, 0xd9, 0x57, 0x53, 0x59,],
    #[0xe3, 0x04, 0x0c, 0x00, 0xeb, 0x28, 0xf1, 0x53, 0x66, 0xca, 0x73, 0xcb, 0xd8, 0x72, 0xe7, 0x40,],
    #[0x76, 0x97, 0x00, 0x9a, 0x6a, 0x83, 0x1d, 0xfe, 0xcc, 0xa9, 0x1c, 0x59, 0x93, 0x67, 0x0f, 0x7a,],
    #[0x58, 0x53, 0x54, 0x23, 0x21, 0xf5, 0x67, 0xa0, 0x05, 0xd5, 0x47, 0xa4, 0xf0, 0x47, 0x59, 0xbd,],
    #[0x51, 0x50, 0xd1, 0x77, 0x2f, 0x50, 0x83, 0x4a, 0x50, 0x3e, 0x06, 0x9a, 0x97, 0x3f, 0xbd, 0x7c,],
]

DREAM ::= """
    Sarnac had worked almost continuously for the better part of a year
    upon some very subtle chemical reactions of the nervous cells of the
    sympathetic system.  His first enquiries had led to the opening out
    of fresh and surprising possibilities, and these again had lured him
    on to still broader and more fascinating prospects.  He worked
    perhaps too closely; he found his hope and curiosity unimpaired, but
    there was less delicacy of touch in his manipulation, and he was
    thinking less quickly and accurately.  He needed a holiday.  He had
    come to the end of a chapter in his work and wished to brace himself
    for a new beginning.  Sunray had long hoped to be away with him; she,
    too, was at a phase in her work when interruption was possible, and
    so the two went off together to wander among the lakes and mountains.

    Their companionship was at a very delightful stage.  Their close
    relationship and their friendship was of old standing, so that they
    were quite at their ease with one another, yet they were not too
    familiar to have lost the keen edge of their interest in each other's
    proceedings.  Sunray was very much in love with Sarnac and glad, and
    Sarnac was always happy and pleasantly exalted when Sunray was near
    him.  Sunray was the richer-hearted and cleverer lover.  They talked
    of everything in the world but Sarnac's work because that had to rest
    and grow fresh again.  Of her own work Sunray talked abundantly.  She
    had been making stories and pictures of happiness and sorrow in the
    past ages of the world, and she was full of curious speculations
    about the ways in which the ancestral mind has thought and felt.

    They played with boats upon the great lake for some days, they sailed
    and paddled and drew up their canoe among the sweet-scented rushes of
    the islands and bathed and swam.  They went from one guest-house to
    another upon the water and met many interesting and refreshing
    people.  In one house an old man of ninety-eight was staying: he was
    amusing his declining years by making statuettes of the greatest
    beauty and humour; it was wonderful to see the clay take shape in his
    hands.  Moreover, he had a method of cooking the lake fish that was
    very appetising, and he made a great dish of them so that everyone
    who was dining in the place could have some.  And there was a
    musician who made Sunray talk about the days gone by, and afterwards
    he played music with his own hands on a clavier to express the
    ancient feelings of men.  He played one piece that was, he explained,
    two thousand years old; it was by a man named Chopin, and it was
    called the Revolutionary Etude.  Sunray could not have believed a
    piano capable of such passionate resentment.  After that he played
    grotesque and angry battle music and crude marching tunes from those
    half-forgotten times, and then he invented wrathful and passionate
    music of his own.
    """
