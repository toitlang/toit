# Zero-Clause BSD License

# Copyright (C) 2025 Toit contributors.

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

name: Upload Full Source Tarball

on:
  release:
    types: [published]
  push:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository without submodules
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0  # Fetch all history so the archive has correct metadata.

      - name: Create tarball including mbedtls
        id: create-tarball
        shell: bash
        run: |
          version=${{ github.event.release.tag_name }}
          if [ -z "$version" ]; then
            version=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          fi
          archive_name="toit-${version}-with-submodules.tar.gz"

          # Archive the Toit sources.
          prefix="toit-${version}/"
          git archive --format=tar --prefix="$prefix" HEAD | tar x

          # Archive the relevant submodules.
          # Initialize the top-level modules but not nested ones. This fills in the esp-idf submodule.
          git submodule update --depth=1 --init .

          esp_idf=${{ github.workspace }}/third_party/esp-idf
          # We only need mbedtls of the esp-idf submodule to build the host tools.
          # Don't bother initializing all the other components.
          cd $esp_idf
          git submodule update --depth=1 --init components/mbedtls

          paths_to_archive=(
            components/mbedtls
            components/mbedtls/mbedtls
          )
          for path in "${paths_to_archive[@]}"; do
            cd $esp_idf/$path
            # Archive the mbedtls submodule.
            # The --prefix option is used to set the directory structure in the archive.
            # Tar needs to extract to the same directory structure as the original.
            git archive --format=tar --prefix="$prefix/third_party/esp-idf/$path/" HEAD . | tar x -C ${{ github.workspace }}
          done

          cd ${{ github.workspace }}
          cp third_party/esp-idf/LICENSE ${prefix}third_party/esp-idf/LICENSE
          tar -czf "$archive_name" "toit-${version}"
          echo "archive_version=$version" >> $GITHUB_OUTPUT
          echo "archive_name=$archive_name" >> $GITHUB_OUTPUT
          echo "archive_path=${{ github.workspace }}/$archive_name" >> $GITHUB_OUTPUT
          echo "archive_prefix=$prefix" >> $GITHUB_OUTPUT

      - name: Upload tarball to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.create-tarball.outputs.archive_path }}
          name: ${{ steps.create-tarball.outputs.archive_name }}

      - name: Upload tarball to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.create-tarball.outputs.archive_path }}
          asset_name: ${{ steps.create-tarball.outputs.archive_name }}
          tag: ${{ github.event.release.tag_name }}
          overwrite: true

    outputs:
      archive_version: ${{ steps.create-tarball.outputs.archive_version }}
      archive_name: ${{ steps.create-tarball.outputs.archive_name }}
      archive_path: ${{ steps.create-tarball.outputs.archive_path }}
      archive_prefix: ${{ steps.create-tarball.outputs.archive_prefix }}


  test:
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
      - name: Download tarball from artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-and-upload.outputs.archive_name }}

      - name: Extract tarball
        shell: bash
        run: |
          tar -xzf ${{ needs.build-and-upload.outputs.archive_name }}

      - name: Build
        shell: bash
        run: |
          cd ${{ needs.build-and-upload.outputs.archive_prefix }}
          export TOIT_GIT_VERSION=${{ needs.build-and-upload.outputs.archive_version }}
          make IGNORE_SUBMODULE=1 IGNORE_GIT_TAGS=1

      - name: Test
        shell: bash
        run: |
          cd ${{ needs.build-and-upload.outputs.archive_prefix }}
          build/host/sdk/bin/toit version
