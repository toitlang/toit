name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build:
    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        # macos-10.15, as we currently need Clang 12 (https://github.com/toitlang/toit/issues/130)
        # windows-2022, as it's currently later than windows-latest.
        # ubuntu-18.04 so that we don't depend on a recent glibc.
        container: [ ubuntu-18.04, macos-10.15, windows-2022 ]
        shard: [1, 2, 3, 4, 5]

    runs-on: ${{ matrix.container }}

    steps:
      - name: Set up constants
        id: constants
        run: |
          echo ::set-output name=external_result::external-result-$RUNNER_OS-${{ matrix.shard }}.txt
          echo ::set-output name=external_result_key::external-result-${{ github.run_id }}-${{ github.run_attempt }}-$RUNNER_OS-${{ matrix.shard }}
          echo ::set-output name=debug_root_dir::debug-ci
          echo ::set-output name=debug_dir::debug-ci/$RUNNER_OS-${{ matrix.shard }}
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo ::set-output name=artifact::toit-linux.tar.gz
            echo ::set-output name=total_shards::5
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo ::set-output name=artifact::toit-macos.tar.gz
            echo ::set-output name=total_shards::5
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo ::set-output name=artifact::toit-windows.tar.gz
            echo ::set-output name=total_shards::5
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi
        shell: bash

      - uses: actions/checkout@v2

      # Anything in the debug dir will be uploaded as artifact.
      - name: Setup debug dir
        shell: sh
        run: |
          mkdir -p ${{ steps.constants.outputs.debug_dir }}

      - name: Fetch tags
        # The github checkout is shallow and doesn't have tags.
        run: |
          git fetch --tags

      # We only need the tpkg and mbedtls submodule for building.
      - name: Initialize mbedtls submodule
        run: |
          cd third_party/esp-idf
          git submodule update --init .
          git submodule update --init components/mbedtls

      # Use Go 1.17
      - name: Switch to Go 1.17
        run:
          echo "$GOROOT_1_17_X64"/bin >> $GITHUB_PATH

      # Get values for cache paths to be used in later steps
      - name: Get Go paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-mod-

      - name: Ccache cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache gcc-multilib g++-multilib
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja ccache
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja ccache
          ninja --version
          ccache --version
          cmake --version

      # Build using make.
      - name: make
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
          SHARD_START: ${{ matrix.shard }}
          SHARD_STRIDE: ${{ steps.constants.outputs.total_shards }}
        shell: bash
        run: |
          make all
          if [ "$RUNNER_OS" == "Linux" ]; then
            make CROSS_ARCH=host32 all-cross
          fi

      # Test.
      - name: Test
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
          SHARD_START: ${{ matrix.shard }}
          SHARD_STRIDE: ${{ steps.constants.outputs.total_shards }}
        shell: bash
        run: |
          make test
          make test-health
          if [ "$RUNNER_OS" == "Linux" ]; then
            cd build/host32
            ninja check
          fi

      # We use a cache to send the external test result to the external job.
      - name: Retrieve/store external test result
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result }}
          key: ${{ steps.constants.outputs.external_result_key }}

      # Test external code.
      - name: Test external
        # External tests are allowed to fail, but we record them and
        # fail a non-required job if they do.
        continue-on-error: true
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
          SHARD_START: ${{ matrix.shard }}
          SHARD_STRIDE: ${{ steps.constants.outputs.total_shards }}
        shell: bash
        run: |
          # Mark the external test as failing, and update it at the end of this step.
          echo fail > ${{ steps.constants.outputs.external_result }}
          make enable-external
          find external > ${{ steps.constants.outputs.debug_dir }}/${{ matrix.container }}_${{ matrix.shard }}_files_after_enable_external.log
          make test-external
          make test-external-health
          if [ "$RUNNER_OS" == "Linux" ]; then
            cmake -DTOIT_TEST_EXTERNAL=ON build/host32
            make CROSS_ARCH=host32 rebuild-cross-cmake
            cd build/host32
            ninja check_external
            cd ../..
          fi
          # If we reach here, all steps of this step succeeded.
          echo success > ${{ steps.constants.outputs.external_result }}

      - name: Pack artifacts
        if: matrix.shard == 1
        shell: bash
        # Note that we use `cp -R` first, since that works on every platform.
        run: |
          cp -R ./build/host/sdk ./build/host/toit
          tar -czf build/${{ steps.constants.outputs.artifact }} -C ./build/host -h --exclude toit/bin/mbedtls toit

      - name: Prepare debug repros
        if: always()
        continue-on-error: true
        shell: bash
        run: |
          REPRO_DIR=${{ steps.constants.outputs.debug_root_dir }}/repros
          mkdir -p $REPRO_DIR
          find /tmp -maxdepth 1 -name 'lsp_repro-*' -exec cp -r {} $REPRO_DIR \;

      - name: Upload debug artifacts
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: debug
          path: ${{ steps.constants.outputs.debug_root_dir }}
          retention-days: 5

      - name: Upload artifacts
        if: matrix.shard == 1
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-build
          path: build/${{ steps.constants.outputs.artifact }}

      - name: Upload release artifacts
        if: |
          (github.event_name) == 'release' &&
          (matrix.shard == 1)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/${{ steps.constants.outputs.artifact }}
          tag: ${{ github.ref }}
          overwrite: true

  # Really annoying that we need to duplicate so much.
  esp32:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Fetch tags
        # The github checkout is shallow and doesn't have tags.
        run: |
          git fetch --tags

      - name: Initialize submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive -j 16

      # Use Go 1.17
      - name: Switch to Go 1.17
        run:
          echo "$GOROOT_1_17_X64"/bin >> $GITHUB_PATH

      # Get values for cache paths to be used in later steps
      - name: Get Go paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-mod-

      - name: Ccache cache
        uses: actions/cache@v2
        # Store and retrieve the cache with the given sha.
        # The 'restore-keys' prefix finds the most recent cache in case there
        # is no match (which should almost always be the case).
        with:
          path: ${{ github.workspace }}/.ccache
          key: esp32-ccache-${{ github.sha }}
          restore-keys: esp32-ccache-

      - name: Install dependencies - Linux
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache
          ninja --version
          cmake --version
          gcc --version

      - name: Ccache symlinks
        run: |
          mkdir ccache_interceptors
          cd ccache_interceptors
          ln -s $(command -v ccache) xtensa-esp32-elf-gcc
          ln -s $(command -v ccache) xtensa-esp32-elf-g++

      - name: Install ESP32 tools
        run: |
          third_party/esp-idf/install.sh

      # Build using make.
      - name: make
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          IDF_CCACHE_ENABLE: 1
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
        run: |
          source third_party/esp-idf/export.sh
          # Make sure the ccache interceptors are before any other path.
          export PATH="$PWD/ccache_interceptors":$PATH
          make esp32

  # Really annoying that we need to duplicate so much.
  cross_windows:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Fetch tags
        # The github checkout is shallow and doesn't have tags.
        run: |
          git fetch --tags

      # We only need the tpkg and mbedtls submodule for building.
      - name: Initialize mbedtls submodule
        run: |
          cd third_party/esp-idf
          git submodule update --init .
          git submodule update --init components/mbedtls

      # Use Go 1.17
      - name: Switch to Go 1.17
        run:
          echo "$GOROOT_1_17_X64"/bin >> $GITHUB_PATH

      # Get values for cache paths to be used in later steps
      - name: Get Go paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-mod-

      - name: Ccache cache
        uses: actions/cache@v2
        # Store and retrieve the cache with the given sha.
        # The 'restore-keys' prefix finds the most recent cache in case there
        # is no match (which should almost always be the case).
        with:
          path: ${{ github.workspace }}/.ccache
          key: esp32-ccache-${{ github.sha }}
          restore-keys: esp32-ccache-

      - name: Install dependencies - Linux
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache mingw-w64
          ninja --version
          cmake --version
          gcc --version

      # Build using make.
      - name: make
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
        run: |
          make CROSS_ARCH=win64 all-cross

  external:
    needs: build

    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        container: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.container }}

    steps:
      - name: Set up constants
        id: constants
        shell: bash
        run: |
          echo ::set-output name=external_result_prefix::external-result-$RUNNER_OS
          echo ::set-output name=external_result_key_prefix::external-result-${{ github.run_id }}-${{ github.run_attempt }}-$RUNNER_OS

      - name: Retrieve 1
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result_prefix }}-1.txt
          key: ${{ steps.constants.outputs.external_result_key_prefix }}-1
      - name: Retrieve 2
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result_prefix }}-2.txt
          key: ${{ steps.constants.outputs.external_result_key_prefix }}-2
      - name: Retrieve 3
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result_prefix }}-3.txt
          key: ${{ steps.constants.outputs.external_result_key_prefix }}-3
      - name: Retrieve 4
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result_prefix }}-4.txt
          key: ${{ steps.constants.outputs.external_result_key_prefix }}-4
      - name: Retrieve 5
        uses: actions/cache@v2
        with:
          path: ${{ steps.constants.outputs.external_result_prefix }}-5.txt
          key: ${{ steps.constants.outputs.external_result_key_prefix }}-5

      - name: Check
        shell: bash
        run: |
          cat external-result*
          ! grep "fail" external-result*
