# Zero-Clause BSD License

# Copyright (C) 2025 Toit contributors.

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

name: CI

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

on:
  schedule:
    - cron: '00 2 * * *' # 02:00 UTC
  push:
    branches-ignore:
      - "wip/**"
      - "wip-**"
      - "*/wip-**"
      - "*/wip/**"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      # Use 'inputs.<name>' when pasting into a bash `if`, like so:
      #    if [[ "${{ inputs.strip }}" == 'true' ]]; then ...
      #
      # When using to guard a step, use 'github.event.inputs.<name>', like so:
      #    if: ${{ github.event.inputs.<name> == 'true' }}
      # or
      #    if: ${{ github.event.inputs.<name> != 'false' }}
      # In the first case, the step will not run if there isn't any workflow dispatch.
      # In the second case, the step will run if there isn't any workflow dispatch.
      # As such, the recommendation is to use the `== true` if the default is
      # false, and the `!= false` if the default is true.
      sign:
        description: "Sign executables"
        required: false
        type: choice
        options:
          - none
          - macos
          - windows
          - macos+windows
        default: "none"
      build-arm-macos:
        description: "Build ARM macOS executables"
        required: false
        type: boolean
        default: false
      dispatch-toitdocs:
        description: "Dispatch toitdoc rebuild"
        required: false
        type: boolean
        default: false
      tests:
        description: "Run tests"
        required: false
        type: choice
        options:
          - none
          - normal
          - more
        default: "normal"
      run-hw-tests:
        description: "Run hardware tests"
        required: false
        type: boolean
        default: false
      run-esp32-flow:
        description: "Run the ESP32 flow"
        required: false
        type: boolean
        default: true
      run-cross-flow:
        description: "Run the cross flow"
        required: false
        type: boolean
        default: true
      do-release:
        description: "Build release artifacts and upload with this version"
        required: false
        type: string
        default: ""
      ssh:
        description: "Enable ssh access to the host"
        required: false
        type: choice
        options:
          - none
          - linux
          - windows
          - macos
          - macos-arm
        default: none

env:
  TOIT_VERSION: ${{ github.event.inputs.do-release || github.event.release.tag_name || '' }}
  DO_RELEASE: ${{ github.event_name == 'release' || startsWith(github.event.inputs.do-release, 'v') }}
  DO_MORE_TESTS: ${{ github.event_name == 'schedule' || github.event.inputs.tests == 'more' }}
  DO_HW_TESTS: ${{ github.event_name == 'schedule' || github.event.inputs.tests == 'more' || github.event.inputs.run-hw-tests == 'true' }}
  DO_TESTS: ${{ github.event.inputs.tests != 'none' }}
  SIGN_MACOS: ${{ github.event.inputs.sign == 'macos' || github.event.inputs.sign == 'macos+windows' }}
  SIGN_WINDOWS: ${{ github.event.inputs.sign == 'windows' || github.event.inputs.sign == 'macos+windows' }}
  BUILD_ARM_MACOS: ${{ github.event.inputs.build-arm-macos == 'true' }}
  DISPATCH_TOITDOCS: ${{ github.event.inputs.dispatch-toitdocs == 'true' }}
  RUN_WINDOWS_SIGN_FLOW: ${{ github.event_name == 'release' ||
                              startsWith(github.event.inputs.do-release, 'v') ||
                              github.event.inputs.sign == 'windows' ||
                              github.event.inputs.sign == 'macos+windows' }}
  RUN_MACOS_SIGN_FLOW: ${{ github.event_name == 'release' ||
                            startsWith(github.event.inputs.do-release, 'v') ||
                            github.event.inputs.sign == 'macos' ||
                            github.event.inputs.sign == 'macos+windows' }}
  RUN_ESP32_FLOW: ${{ github.event.inputs.run-esp32-flow != 'false' }}
  RUN_CROSS_FLOW: ${{ github.event.inputs.run-cross-flow != 'false' }}
  RUN_AUR_FLOW: ${{ github.event_name == 'release' || startsWith(github.event.inputs.do-release, 'v') }}
  ENABLE_SSH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ssh != 'none' }}
  ESPTOOL_VERSION: "v4.8.1%2Btoitlang"

jobs:
  prereqs:
    runs-on: ubuntu-latest
    steps:
      - name: Show inputs
        if: github.event_name == 'workflow_dispatch'
        run: echo "${{ toJSON(github.event.inputs) }}"

      - name: Set strategy variables
        id: vars
        run: |
          # The cross-flow must be enabled when signing.
          if [[ "${{ env.RUN_WINDOWS_SIGN_FLOW }}" == "true" || \
                "${{ env.RUN_MACOS_SIGN_FLOW }}" == "true" ]]; then
            echo 'RUN_CROSS_FLOW=true' >> $GITHUB_ENV
          fi

          # When running ssh, only run a single shard of the corresponding platform.
          echo 'SHARDS=[1]' >> $GITHUB_OUTPUT
          echo 'SHARD_COUNT=1' >> $GITHUB_OUTPUT
          echo 'EXTRA_INCLUDES=[]' >> $GITHUB_OUTPUT
          platform=${{ github.event.inputs.ssh }}
          # Switch to the corresponding container.
          echo 'CONTAINERS=[ "windows-latest" ]' >> $GITHUB_OUTPUT
          exit 0

          # ubuntu-22.04 so that we don't depend on a recent glibc.
          # macos-13, since it's still intel based.
          if [[ "${{ github.ref }}" == 'refs/heads/master' || \
                "${{ env.DO_RELEASE }}" == "true" || \
                "${{ env.BUILD_ARM_MACOS }}" == "true" || \
                "${{ env.SIGN_MACOS }}" == "true" \
              ]]; then
            echo 'CONTAINERS=[ "ubuntu-22.04", "macos-13", "macos-latest", "windows-latest" ]' > $GITHUB_OUTPUT
          else
            echo 'CONTAINERS=[ "ubuntu-22.04", "macos-13", "windows-latest" ]' > $GITHUB_OUTPUT
          fi
          if [[ "${{ env.DO_TESTS }}" == "true" ]]; then
            echo 'SHARDS=[1, 2, 3, 4, 5]' >> $GITHUB_OUTPUT
            echo 'EXTRA_INCLUDES=[{"container": "ubuntu-22.04", "shard": 6}, {"container": "ubuntu-22.04", "shard": 7}]' >> $GITHUB_OUTPUT
            echo 'SHARD_COUNT=5' >> $GITHUB_OUTPUT
            echo 'SHARD_COUNT_LINUX=7' >> $GITHUB_OUTPUT
          else
            echo 'SHARDS=[1]' >> $GITHUB_OUTPUT
            echo 'EXTRA_INCLUDES=[]' >> $GITHUB_OUTPUT
            echo 'SHARD_COUNT=1' >> $GITHUB_OUTPUT
          fi

    outputs:
      CONTAINERS: ${{ steps.vars.outputs.CONTAINERS }}
      SHARDS: ${{ steps.vars.outputs.SHARDS }}
      EXTRA_INCLUDES: ${{ steps.vars.outputs.EXTRA_INCLUDES }}
      SHARD_COUNT: ${{ steps.vars.outputs.SHARD_COUNT }}
      SHARD_COUNT_LINUX: ${{ steps.vars.outputs.SHARD_COUNT_LINUX }}
      DO_HW_TESTS: ${{ env.DO_HW_TESTS }}
      RUN_ESP32_FLOW: ${{ env.RUN_ESP32_FLOW }}
      RUN_CROSS_FLOW: ${{ env.RUN_CROSS_FLOW }}
      RUN_WINDOWS_SIGN_FLOW: ${{ env.RUN_WINDOWS_SIGN_FLOW }}
      RUN_MACOS_SIGN_FLOW: ${{ env.RUN_MACOS_SIGN_FLOW }}
      RUN_AUR_FLOW: ${{ env.RUN_AUR_FLOW }}

  build:
    needs: prereqs

    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        container: ${{ fromJson(needs.prereqs.outputs.CONTAINERS) }}
        shard: ${{ fromJson(needs.prereqs.outputs.SHARDS) }}

        include: ${{ fromJson(needs.prereqs.outputs.EXTRA_INCLUDES) }}

    runs-on: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up constants
        id: constants
        shell: bash
        run: |
          echo "flaky_result=flaky-result/${{ matrix.container }}-${{ matrix.shard }}.txt" >> $GITHUB_OUTPUT
          echo "flaky_result_name=flaky-result-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.container }}-${{ matrix.shard }}" >> $GITHUB_OUTPUT
          echo "external_result=external-result/${{ matrix.container }}-${{ matrix.shard }}.txt" >> $GITHUB_OUTPUT
          echo "external_result_name=external-result-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.container }}-${{ matrix.shard }}" >> $GITHUB_OUTPUT
          echo "debug_root_dir=debug-ci" >> $GITHUB_OUTPUT
          echo "debug_dir=debug-ci/$RUNNER_OS-${{ matrix.shard }}" >> $GITHUB_OUTPUT
          if [ -z "$TOIT_VERSION" ]; then
            TOIT_VERSION=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          fi
          echo $TOIT_VERSION
          echo "toit_version=$TOIT_VERSION" >> $GITHUB_OUTPUT
          echo "TOIT_GIT_VERSION=$TOIT_VERSION" >> $GITHUB_ENV
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "artifact=toit-linux.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=${{ needs.prereqs.outputs.SHARD_COUNT_LINUX }}" >> $GITHUB_OUTPUT
          elif [[ "$RUNNER_OS" == "macOS" ]] && [[ "$RUNNER_ARCH" == "X64" ]]; then
            echo "artifact=toit-macos.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=${{ needs.prereqs.outputs.SHARD_COUNT }}" >> $GITHUB_OUTPUT
          elif [[ "$RUNNER_OS" == "macOS" ]] && [[ "$RUNNER_ARCH" == "ARM64" ]]; then
            echo "artifact=toit-macos-arm.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=${{ needs.prereqs.outputs.SHARD_COUNT }}" >> $GITHUB_OUTPUT
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "artifact=toit-windows.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=${{ needs.prereqs.outputs.SHARD_COUNT }}" >> $GITHUB_OUTPUT
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi

      # Anything in the debug dir will be uploaded as artifact.
      - name: Setup debug dir
        shell: sh
        run: |
          mkdir -p ${{ steps.constants.outputs.debug_dir }}

      - name: Setup build environment
        uses: ./actions/setup-build
        with:
          toit-dir: .

      - name: Setup compilation env
        shell: bash
        run: |
          echo "SHARD_START=${{ matrix.shard }}" >> $GITHUB_ENV
          echo "SHARD_STRIDE=${{ steps.constants.outputs.total_shards }}" >> $GITHUB_ENV

      - name: Ccache stats
        run: ccache -s

      - name: Enable link-time optimizations
        if: env.DO_RELEASE == 'true'
        run: |
          make enable-lto

      # Build using make.
      - name: Build sdk
        shell: bash
        # Note that the TOIT_GIT_VERSION is set. The make step will thus not
        # compute the version from git.
        run: |
          make sdk

      # Test.
      - name: Test
        if: env.DO_TESTS == 'true'
        shell: bash  # This is crucial, as the powershell doesn't abort when there is an error.
        run: |
          ctest --test-dir build/host --verbose -C slow -R pkg
