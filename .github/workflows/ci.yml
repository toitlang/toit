name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  build:
    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        include:
          - os: linux
            container: ubuntu-latest
            artifact: toit-linux.tar.gz
          - os: macos
            container: macos-10.15   # Currently we need Clang 12 (https://github.com/toitlang/toit/issues/130)
            artifact: toit-macos.tar.gz
          - os: windows
            container: windows-2022  # Currently later than windows-latest.
            artifact: toit-windows.tar.gz

    runs-on: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v2

      - name: Initialize mbed-tls submodule
        # We only need the mbedtls submodule for building.
        run: |
          cd third_party/esp-idf
          git submodule update --init .
          git submodule update --init components/mbedtls

      # Get values for cache paths to be used in later steps
      - name: Get Go paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-mod-

      # We create a new id every second.
      # The 'restore-keys' below will make sure that we continue using earlier versions.
      - name: Create timestamp
        id: timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Ccache Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.timestamp.outputs.timestamp }}
          restore-keys: ${{ runner.os }}-ccache-

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja ccache
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja ccache
          ninja --version
          ccache --version
          cmake --version

      # Build using make.
      - name: make
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
        run: |
          make tools

      - name: Pack artifacts
        shell: bash
        # Note that we use `cp -R` first, since that works on every platform.
        run: |
          cp -R ./build/host/sdk ./build/host/toit
          tar -czf build/${{ matrix.artifact }} -C ./build/host -h --exclude toit/bin/mbedtls toit
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-build
          path: build/${{ matrix.artifact }}
      - name: Upload release artifacts
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/${{ matrix.artifact }}
          tag: ${{ github.ref }}
          overwrite: true
