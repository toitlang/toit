name: CI

on:
  push:
    branches:
      - "*"
      - "*/*"
  release:
    types: [published]
  workflow_dispatch:

env:
  ESPTOOL_VERSION: v4.6

jobs:
  build:
    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        # ubuntu-20.04 so that we don't depend on a recent glibc.
        container: [ windows-latest ]
        shard: [1]

        include:
          - container: ubuntu-20.04
            shard: 6
          - container: ubuntu-20.04
            shard: 7
          - container: ubuntu-20.04
            shard: 8

    runs-on: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up constants
        id: constants
        shell: bash
        run: |
          echo "external_result=external-result/$RUNNER_OS-${{ matrix.shard }}.txt" >> $GITHUB_OUTPUT
          echo "external_result_name=external-result-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          echo "debug_root_dir=debug-ci" >> $GITHUB_OUTPUT
          echo "debug_dir=debug-ci/$RUNNER_OS-${{ matrix.shard }}" >> $GITHUB_OUTPUT
          TOIT_VERSION=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          echo $TOIT_VERSION
          echo "toit_version=$TOIT_VERSION" >> $GITHUB_OUTPUT
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "artifact=toit-linux.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=8" >> $GITHUB_OUTPUT
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "artifact=toit-macos.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=5" >> $GITHUB_OUTPUT
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "artifact=toit-windows.tar.gz" >> $GITHUB_OUTPUT
            echo "total_shards=5" >> $GITHUB_OUTPUT
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi

      # Anything in the debug dir will be uploaded as artifact.
      - name: Setup debug dir
        shell: sh
        run: |
          mkdir -p ${{ steps.constants.outputs.debug_dir }}

      # We only need the mbedtls submodule for building.
      - name: Initialize mbedtls submodule
        run: |
          cd third_party/esp-idf
          git submodule update --init .
          git submodule update --init components/mbedtls

      # Use Go 1.20
      - name: Switch to Go 1.20
        shell: bash
        run:
          echo "$GOROOT_1_20_X64"/bin >> $GITHUB_PATH

      # Get values for cache paths to be used in later steps.
      - name: Get Go paths
        id: go-cache-paths
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Go cache
        # On Windows this takes 3-5 minutes, and doesn't seem to help the build speed much.
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Ccache cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-

      # Cache deb files.
      - name: Apt cache - Linux
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/apt-cacher-ng
          key: ${{ runner.os }}-apt-${{ github.sha }}
          restore-keys: ${{ runner.os }}-apt

      - name: Install and configure apt-cacher-ng - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install -q apt-cacher-ng
          sudo systemctl stop apt-cacher-ng
          if [[ -f apt-cacher-ng/cache.tar.gz ]]; then
            sudo tar -xzf apt-cacher-ng/cache.tar.gz -C /var/cache/apt-cacher-ng
          fi
          echo "Acquire::http::Proxy \"http://localhost:3142\";" | sudo tee /etc/apt/apt.conf.d/00proxy
          echo "PassThroughPattern: .*" | sudo tee -a /etc/apt-cacher-ng/acng.conf
          sudo systemctl restart apt-cacher-ng

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install -q ninja-build ccache gcc-multilib g++-multilib socat valgrind
          ninja --version
          cmake --version
          gcc --version
          socat -V
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja ccache
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja ccache
          ninja --version
          ccache --version
          cmake --version

      - name: Copy apt cache back - Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p apt-cacher-ng
          sudo tar -czf apt-cacher-ng/cache.tar.gz -C /var/cache/apt-cacher-ng .
          sudo chown $(whoami) apt-cacher-ng/cache.tar.gz

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: third_party/esp-idf/components/mbedtls/mbedtls/scripts/driver.requirements.txt

      - name: Set up Python modules for MbedTLS
        run: |
          pip install jsonschema jinja2

      - name: Setup compilation env
        shell: bash
        run: |
          echo 'IDF_PATH=${{ github.workspace }}/third_party/esp-idf' >> $GITHUB_ENV
          echo 'CCACHE_DIR=${{ github.workspace }}/.ccache' >> $GITHUB_ENV
          echo 'CCACHE_BASEDIR=${{ github.workspace }}' >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=400M" >> $GITHUB_ENV
          echo "SHARD_START=${{ matrix.shard }}" >> $GITHUB_ENV
          echo "SHARD_STRIDE=${{ steps.constants.outputs.total_shards }}" >> $GITHUB_ENV

      # Build using make.
      - name: Build sdk
        shell: bash
        run: |
          ccache -s
          make sdk
          if [ "$RUNNER_OS" == "Linux" ]; then
            make HOST=host32 BUILD_TYPE=Debug sdk
            make HOST=host-ctp TOOLCHAIN=host TOIT_CHECK_PROPAGATED_TYPES=1 sdk
          fi
          ccache -s

      - name: Toitdoc - Linux
        if: runner.os == 'Linux' && matrix.shard == 1
        env:
          TOIT_VERSION: ${{ steps.constants.outputs.toit_version }}
          TOITLSP: ${{ github.workspace }}/build/host/sdk/bin/toit.lsp
          TOITC: ${{ github.workspace }}/build/host/sdk/bin/toit.compile
          SDKDIR: ${{ github.workspace }}/
        shell: bash
        run: |
          CPU_CORES=$(nproc)
          JSON_OUT_PATH=${{ github.workspace }}/toitdoc_$TOIT_VERSION.json
          cd "$SDKDIR"
          echo "$TOITLSP" toitdoc -p $CPU_CORES --toitc=$TOITC "--sdk=$SDKDIR" "--out=$JSON_OUT_PATH" --version=$TOIT_VERSION lib
          "$TOITLSP" toitdoc -p $CPU_CORES --toitc=$TOITC "--sdk=$SDKDIR" "--out=$JSON_OUT_PATH" --version=$TOIT_VERSION lib

      - name: Pack artifacts
        if: matrix.shard == 1
        shell: bash
        # Note that we use `cp -R` first, since that works on every platform.
        run: |
          cp -R ./build/host/sdk ./build/host/toit
          tar -czf build/${{ steps.constants.outputs.artifact }} -C ./build/host --dereference toit

      - name: Prepare debug repros
        if: always()
        continue-on-error: true
        shell: bash
        run: |
          ls /tmp/lsp_repro-* || true
          REPRO_DIR=${{ steps.constants.outputs.debug_dir }}/repros
          mkdir -p $REPRO_DIR
          find /tmp -maxdepth 1 -name 'lsp_repro-*' -exec cp -r {} $REPRO_DIR \;
          ls $REPRO_DIR

      - name: Upload debug artifacts
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: debug
          path: ${{ steps.constants.outputs.debug_root_dir }}
          retention-days: 5
          if-no-files-found: ignore

      - name: Upload toitdoc - Linux
        if: runner.os == 'Linux' && matrix.shard == 1
        uses: actions/upload-artifact@v3
        with:
          name: toitdoc
          path: toitdoc_${{ steps.constants.outputs.toit_version }}.json

      - name: Authenticate to Google cloud - Linux
        if: |
          runner.os == 'Linux' && matrix.shard == 1 &&
          github.repository_owner == 'toitlang'
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.INFRASTRUCTURE_SERVICE_ACCOUNT_JSON_KEY }}
          service_account: github-action@infrastructure-220307.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        if: |
          runner.os == 'Linux' && matrix.shard == 1 &&
          github.repository_owner == 'toitlang'
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: infrastructure-220307

      - name: Upload toitdoc to gcloud - Linux
        if: |
          runner.os == 'Linux' && matrix.shard == 1 &&
          github.repository_owner == 'toitlang'
        env:
          TOIT_VERSION: ${{ steps.constants.outputs.toit_version }}
        run: |
          JSON_PATH=${{ github.workspace }}/toitdoc_$TOIT_VERSION.json
          echo -n $TOIT_VERSION > LATEST.tmp
          gsutil cp $JSON_PATH gs://toit-web/toitdoc-sdk/$TOIT_VERSION.json
          gsutil cp LATEST.tmp gs://toit-web/toitdoc-sdk/LATEST

      - name: Upload unsigned artifacts - Windows
        if: runner.os == 'Windows' && matrix.shard == 1
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-build-unsigned
          path: build/${{ steps.constants.outputs.artifact }}

      - name: Upload artifacts - Linux/macOS
        if: runner.os != 'Windows' && matrix.shard == 1
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-build
          path: build/${{ steps.constants.outputs.artifact }}

  combine:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: Windows-build-unsigned

      - name: Unpack SDKs
        run: |
          for os in windows; do
            mkdir -p $os
            tar x -zf toit-$os.tar.gz -C $os
          done

      - name: Compress SDKs
        run: |
          for os in windows; do
            tar c -zf toit-$os.tar.gz -C $os toit
          done

      - name: Upload Windows unsigned
        uses: actions/upload-artifact@v3
        with:
          name: Windows-build-unsigned
          path: toit-windows.tar.gz

      - name: Upload release artifacts
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: toit-windows.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
